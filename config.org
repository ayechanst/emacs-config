#+TITLE:Emacs Config
#+AUTHOR: Aye Chan San Tun
#+DESCRIPTION: Aye Chan's personal emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc:
- [[#buffer-move][Buffer Move]]
- [[#company][Company]]
- [[#elpaca-package-manager][Elpaca Package Manager]]
- [[#evil-mode][Evil Mode]]
  - [[#evil-keybindings][Evil Keybindings]]
- [[#general-keybindings][General Keybindings]]
  - [[#reloads-emacs][Reloads emacs]]
- [[#graphical-user-interface-tweaks][Graphical User Interface Tweaks]]
  - [[#all-the-icons][All the Icons]]
  - [[#dashboard][Dashboard]]
  - [[#diminish][Diminish]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars, and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
  - [[#fonts][Fonts]]
  - [[#smooth-scrolling][Smooth Scrolling]]
  - [[#theme][Theme]]
  - [[#zooming-in-and-out][Zooming In and Out]]
- [[#ivy-counsel][Ivy (Counsel)]]
- [[#language-support][Language Support]]
  - [[#json][JSON]]
  - [[#typescript][Typescript]]
  - [[#general-language-support][General Language Support]]
  - [[#rust][Rust]]
  - [[#solidity][Solidity]]
- [[#org-mode][Org Mode]]
  - [[#table-of-contents][Table of Contents]]
  - [[#bullets][Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#source-code-block-shortcut][Source Code block shortcut]]
- [[#projectile][Projectile]]
- [[#rainbow-mode][Rainbow Mode]]
- [[#shells-and-terminal][Shells and Terminal]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm Toggle]]
- [[#which-key][Which Key]]

* Buffer Move
This is what allows windows to move around. Look at keybindings for applications
#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

* Company
Stands for "Complete Anything". Its an auto-completion framework
that give context-aware suggestions. Its extensible and OP apperently.
#+begin_src emacs-lisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src
* Elpaca Package Manager

#+begin_src emacs-lisp

  (defvar elpaca-installer-version 0.6)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))

	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (call-process "git" nil buffer t "clone"
					 (plist-get order :repo) repo)))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

#+end_src
* Evil Mode
#+begin_src emacs-lisp
  ;; Install a package via the elpaca macro
  ;; See the "recipes" section of the manual for more details.
  ;; (elpaca example-package)
  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))
  ;; Block until current queue processed.
  (elpaca-wait)
  ;;When installing a package which modifies a form used at the top-level
  ;;(e.g. a package which adds a use-package key word),
  ;;use `elpaca-wait' to block until that package has been installed/configured.
  ;;For example:
  ;;(use-package general :demand t)
  ;;(elpaca-wait)
  ;; Expands to: (elpaca evil (use-package evil :demand t))
  (use-package evil
       :init
       (setq evil-want-integration t)
       (setq evil-want-keybinding nil)
       (setq evil-vsplit-window-below t)
       (evil-mode))
  (use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
  (use-package evil-tutor)
  ;;Turns off elpaca-use-package-mode current declaration
  ;;Note this will cause the declaration to be interpreted immediately (not deferred).
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

  ;; Don't install anything. Defer execution of BODY
  ;; (elpaca nil (message "deferred"))
#+end_src 
** Evil Keybindings
This changes the emacs "global prefix" C-u to scroll up in vim.
#+begin_src emacs-lisp

(with-eval-after-load 'evil
  (define-key evil-motion-state-map (kbd "C-u") 'evil-scroll-up))

#+end_src

* General Keybindings
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)
  
  (general-create-definer ayechan/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader key
    :global-prefix "M-SPC")

  (ayechan/leader-keys 
    "b" '(:ignore t :wk "Buffer") ;; sets the next key (in this case b)
    "b b" '(switch-to-buffer :wk "Switch buffer") ;; now here is what all the b's do
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b i" '(ibuffer :wk "Ibuffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer"))

  (ayechan/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines"))

  (ayechan/leader-keys 
    "o" '(:ignore t :wk "Open")
    "o t" '(vterm-toggle :wk "Toggle vterm"))

  (ayechan/leader-keys
    "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
    "f r" '(counsel-recentf :wk "Find recent file")
    "TAB TAB" '(comment-line :wk "Comment lines"))

  (ayechan/leader-keys
    "h" '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable")
    "h r r" '(reload-init-file :wk "Reload emacs config"))

  (ayechan/leader-keys
    "m" '(:ignore t :wk "Org")
    "m a" '(org-agenda :wk "Org agenda")
    "m e" '(org-export-dispatch :wk "Org export dispatch")
    "m i" '(org-toggle-item :wk "Org toggle item")
    "m t" '(org-todo :wk "Org todo")
    "m B" '(org-babel-tangle :wk "Org babel tangle")
    "m T" '(org-todo-list :wk "Org todo list"))

  (ayechan/leader-keys
    "m b" '(:ignore t :wk "Tables")
    "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

  (ayechan/leader-keys
    "m d" '(:ignore t :wk "Date/deadline")
    "m d t" '(org-time-stamp :wk "Org time stamp"))

  (ayechan/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w d" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))

  (ayechan/leader-keys
    "e" '(:ignore t :wk "Evaluate")
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region"))

  (ayechan/leader-keys
    "f" '(:ignore t :wk "File") ;; sets the next key
    "f f" '(find-file :wk "Find file")))
#+end_src

** Reloads emacs
Reloads emacs on G.O.D.
#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src
* Graphical User Interface Tweaks
Let's make GNU Emacs look better
** All the Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
    

#+end_src
** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Happiness is the feeling that power increases - that resistance is being overcome.")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  ;;(setq dashboard-startup-banner "/home/santun/.config/emacs/images/cartoon-gnu.jpg")  ;; use custom image as banner
  (setq dashboard-center-content t) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
#+end_src
** Diminish
This package makes it so minor modes don't appear on the mode line.
#+begin_src emacs-lisp
(use-package diminish)
#+end_src

** Disable Menubar, Toolbars, and Scrollbars
#+begin_src emacs-lisp

(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp

(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
(setq-default truncate-lines nil)

#+end_src

** Fonts 
The different fonts emacs will use
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "JetBrains Mono"
                      :height 110 
                      :weight 'medium)

  (set-face-attribute 'variable-pitch nil
                      :font "Ubuntu"
                      :height 120
                      :weight 'medium)

  (set-face-attribute 'fixed-pitch nil
                      :font "JetBrains Mono"
                      :height 110
                      :weight 'medium)

  ;; Make commented text and keywords italic.
  ;; This is working in emacsclient but not in emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)

  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)

  ;; Set font on graphical frames
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

  ;; Uncomment the following line if line spacing needs adjusting
   (setq-default line-spacing 0.12)

#+end_src

** Smooth Scrolling
Instead of jumping around, this should make the screen scroll smoothly with evil mode.
#+begin_src emacs-lisp
(setq redisplay-dont-pause t
  scroll-margin 1
  scroll-step 1
  scroll-conservatively 10000
  scroll-preserve-screen-position 1)
(setq scroll-conservatively 10)
(setq scroll-margin 4)
#+end_src
** Theme
#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")
(load-theme 'hyper-beast-2 t)
;; (load-theme 'soft-charcoal t)
#+end_src

** Zooming In and Out
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
* Ivy (Counsel)
#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :diminish
  :config (counsel-mode))

(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :diminish
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))
#+end_src
* Language Support
** JSON
Enables syntax highlighting for JSON.
#+begin_src emacs-lisp

(use-package json-mode
  :ensure t)

#+end_src

** Typescript
Give syntax highlighting to .js related files.
#+begin_src emacs-lisp

(use-package typescript-mode
  :ensure t
  :mode (("\\.js\\'" . typescript-mode)
         ("\\.ts\\'" . typescript-mode)
         ("\\.jsx\\'" . typescript-mode)
         ("\\.tsx\\'" . typescript-mode)))

#+end_src

*** Web Mode
Alternative to the rather annoying RJSX mode. Web mode covers more
bases and is more broad than RJSX but is less specialized.
#+begin_src emacs-lisp

(use-package web-mode
  :ensure t
  :after typescript-mode
  :mode (("\\.tsx\\'" . web-mode)
         ("\\.jsx\\'" . web-mode))
  :config
  ;; Set up indentation and other configurations as needed
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-enable-auto-pairing t
        web-mode-enable-css-colorization t))

#+end_src
*** Tide
Stands for "TypeScript Interactive Development Environment". Tide
is responsible for autocompletion, type checking, and jumping to 
definitions.
#+begin_src emacs-lisp

(use-package tide
  :ensure t
  :diminish
  :after (typescript-mode company) ;; removed flycheck from list
  :hook ((typescript-mode . tide-setup)))

;; This Tide config is more robust but less stable
;; (defun setup-tide-mode()
;;   (interactive)
;;   (tide-setup)
;;   (flycheck-mode +1)
;;   (setq flycheck-check-syntax-automatically '(save mode enabled))
;;   (tide-hl-identifier-mode +1)
;;   (company-mode +1))
;; (use-package tide
;;   :ensure t
;;   :diminish
;;   :after (typescript-mode company flycheck)
;;   :hook ((typescript-mode . setup-tide-mode)
;;          (typescript-mode . tide-hl-identifier-mode)
;;          (before-save . tide-format-before-save)))

#+end_src

*** Prettier
Makes everything more pretty no cap
#+begin_src emacs-lisp

(use-package prettier-js
  :ensure t
  :after (web-mode)
  :hook (web-mode . prettier-js-mode))

#+end_src

*** RJSX Mode
This give syntax highlighting which is important.
Causing a lot of problems mainly making things red and giving
warnings on things that should be perfectly fine. 
#+begin_src emacs-lisp

;; (use-package rjsx-mode 
;;   :ensure t
;;   :after typescript-mode
;;   :hook ((rjsx-mode . prettier-js-mode)
;;          (rjsx-mode . tide-setup)
;;          (rjsx-mode . tide-hl-identifier-mode)
;;          (rjsx-mode . flycheck-mode))
;;   :config
;;     (add-to-list 'auto-mode-alist '("\\.tsx\\'" . rjsx-mode))
;;     (add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode))
;; ;; this stops the "<" symbol from auto-completing to "</>"
;;     (with-eval-after-load 'rjsx-mode
;;       (define-key rjsx-mode-map "<" nil)
;;       (define-key rjsx-mode-map (kbd "C-d") nil)
;;       (define-key rjsx-mode-map ">" nil)))
;; (setq js-indent-level 2)

#+end_src
** General Language Support
*** Flycheck
A tool that takes care of syntax checking and its also a linter.
#+begin_src emacs-lisp

;; (use-package flycheck
;;   :ensure t
;;   :demand
;;   :diminish
;;   :init (global-flycheck-mode))

#+end_src

*** LSP-Mode
Not required for RJSX mode or prettier, but its supposed to pair
nicely with Tide.
#+begin_src emacs-lisp

(use-package lsp-mode
  :ensure t
  :hook (typescript-mode . lsp)
  ;; :hook (web-mode . lsp)
  :config
  (lsp-enable-which-key-integration t))

#+end_src

** Rust
LSP for rust not much more to say.
#+begin_src emacs-lisp

;; (use-package lsp-mode
;;   :ensure
;;   :commands lsp
;;   :custom
;;   ;; what to use when checking on-save. "check" is default, I prefer clippy
;;   (lsp-rust-analyzer-cargo-watch-command "clippy")
;;   (lsp-eldoc-render-all t)
;;   (lsp-idle-delay 0.6)
;;   ;; enable / disable the hints as you prefer:
;;   (lsp-inlay-hint-enable t)
;;   ;; These are optional configurations. See https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-analyzer/#lsp-rust-analyzer-display-chaining-hints for a full list
;;   (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
;;   (lsp-rust-analyzer-display-chaining-hints t)
;;   (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
;;   (lsp-rust-analyzer-display-closure-return-type-hints t)
;;   (lsp-rust-analyzer-display-parameter-hints nil)
;;   (lsp-rust-analyzer-display-reborrow-hints nil)
;;   :config
;;   (add-hook 'lsp-mode-hook 'lsp-ui-mode))

;; (use-package lsp-ui
;;   :ensure
;;   :commands lsp-ui-mode
;;   :custom
;;   (lsp-ui-peek-always-show t)
;;   (lsp-ui-sideline-show-hover t)
;;   (lsp-ui-doc-enable nil))

#+end_src
** Solidity
* Org Mode
** Table of Contents
#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Bullets
Makes headers bullets instead of whetever they once were on God.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable Electric Indent
Prevents elisp code from doing mega cringe indents for literally no reason on my mama.
#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
#+end_src

** Source Code block shortcut
Write "<s" then press tab to make a source block quickly
There are also more versions of this < pattern
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

* Projectile
Projectile is a project interaction library for Emacs.  It should be noted that many projectile commands do not work if you have set “fish” as the 
“shell-file-name” for Emacs.  I had initially set “fish” as the “shell-file-name” in the Vterm section of this config, but oddly enough I changed it to “bin/sh” 
and projectile now works as expected, and Vterm still uses “fish” because my default user “sh” on my Linux system is “fish”.
#+begin_src emacs-lisp
(use-package projectile
  :diminish
  :config 
  (projectile-mode 1))
#+end_src
* Rainbow Mode
Minor mode that enhances the display of colors.
#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)
#+end_src

* Shells and Terminal
** Eshell
This is eshell, its a shell written in elisp
#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
;; eshell-aliases-file -- sets an aliases file for the eshell.
  
(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))

#+end_src
** Vterm
This is vterm 
#+begin_src emacs-lisp
(use-package vterm
:config
(setq shell-file-name "/bin/fish"
      vterm-max-scrollback 5000))
#+end_src
** Vterm Toggle
#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src
* Which Key
This package opens a mini-buffer that displays the available keys
that can be pressed after the first keystroke. Good trusty handy
tool no cap.
#+begin_src emacs-lisp
(use-package which-key
:init 
(which-key-mode 1)
:diminish
:config
(setq which-key-side-window-location 'bottom
      which-key-sort-order #'which-key-key-order-alpha
      which-key-sort-uppercase-first nil
      which-key-add-column-padding 1
      which-key-max-display-columns nil
      which-key-min-display-lines 6

      which-key-side-window-max-height 0.25
      which-key-idle-delay 0.8
      which-key-max-description-length 25
      which-key-allow-imprecise-window-fit nil
      which-key-separator " → " ))

#+end_src







